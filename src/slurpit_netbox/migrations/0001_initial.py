# Generated by Django 4.2.7 on 2023-11-07 17:43

from django.db import migrations
from extras.choices import CustomFieldTypeChoices
from netmiko.ssh_dispatcher import CLASS_MAPPER_BASE

from .. import get_config


netmiko_choices = get_config('netmiko_choices')
netmiko_handler = get_config('netmiko_handler')
netmiko_types = [[t, t] for t in CLASS_MAPPER_BASE]

oem_name = 'OEM'


def add_netmiko_device_type_support(apps, schema_editor):
    ChoiceSet = apps.get_model('extras', 'CustomFieldChoiceSet')
    default_choices = {
        'description': 'NetMiko supported handlers',
        'extra_choices': netmiko_types,
        'order_alphabetically': True,
    }
    choice, _new = ChoiceSet.objects.get_or_create(defaults=default_choices,
                                                   name=netmiko_choices)
    default_custom_field = {
        'type': CustomFieldTypeChoices.TYPE_SELECT,
        'choice_set': choice,
        'description': "Netmiko handler's name for integrations",
        'is_cloneable': True,
    }
    CustomField = apps.get_model('extras', 'CustomField')
    cf, _ = CustomField.objects.get_or_create(defaults=default_custom_field,
                                              name=netmiko_handler)

    ContentType = apps.get_model('contenttypes', 'ContentType')
    print('ContentType is', ContentType)
    print('containing these objects:')
    for ct in ContentType.objects.all():
        print(ct)
    print('end of content-type dump')
    device = ContentType.objects.get(app_label='dcim', model='device')
    cf.content_types.set({device})


def add_default_mandatory_objects(apps, schema_editor):
    site_name = get_config('Site')['name']
    site_mngr = apps.get_model('dcim', 'Site').objects
    site_defs = {'slug': site_name.lower()}
    site, _ = site_mngr.get_or_create(defaults=site_defs, name=site_name)

    manu_mngr = apps.get_model('dcim', 'Manufacturer').objects
    manu_defs = {'slug': oem_name.lower()}
    manu, _ = manu_mngr.get_or_create(defaults=manu_defs, name=oem_name)

    devtype_model = get_config('DeviceType')['model']
    type_mngr = apps.get_model('dcim', 'DeviceType').objects
    type_defs = {'manufacturer': manu}
    type, _ = type_mngr.get_or_create(defaults=type_defs, model=devtype_model)

    role_name = get_config('DeviceRole')['name']
    role_mngr = apps.get_model('dcim', 'DeviceRole').objects
    role_defs = {}
    role, _ = role_mngr.get_or_create(defaults=role_defs, name=role_name)


class Migration(migrations.Migration):

    dependencies = [
        ('virtualization', '0036_virtualmachine_config_template'),
    ]

    operations = [
        # migrations.RunPython(add_netmiko_device_type_support),
        # migrations.RunPython(add_default_mandatory_objects),
    ]
